#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Minecraft Mod Manager API
"""

import asyncio
import httpx
import json
from typing import Dict, Any

class ModManagerClient:
    """–ü—Ä–æ—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Minecraft Mod Manager API"""
    
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url.rstrip('/')
    
    async def _request(self, method: str, endpoint: str, **kwargs) -> Dict[Any, Any]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}{endpoint}"
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.request(method, url, **kwargs)
            response.raise_for_status()
            return response.json()
    
    async def health_check(self) -> Dict[Any, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        return await self._request("GET", "/health")
    
    async def get_server_info(self) -> Dict[Any, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        return await self._request("GET", "/server/info")
    
    async def install_mod(self, mod: str, force_update: bool = False, auto_update: bool = True) -> Dict[Any, Any]:
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥"""
        data = {
            "mod": mod,
            "force_update": force_update,
            "auto_update": auto_update
        }
        return await self._request("POST", "/install", json=data)
    
    async def get_mods(self) -> Dict[Any, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–æ–≤"""
        return await self._request("GET", "/mods")
    
    async def remove_mod(self, mod_slug: str) -> Dict[Any, Any]:
        """–£–¥–∞–ª–∏—Ç—å –º–æ–¥"""
        return await self._request("DELETE", f"/mods/{mod_slug}")
    
    async def update_mod(self, mod_slug: str) -> Dict[Any, Any]:
        """–û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥"""
        return await self._request("POST", f"/mods/{mod_slug}/update")
    
    async def get_auto_update_status(self) -> Dict[Any, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        return await self._request("GET", "/auto-update/status")
    
    async def enable_auto_update(self) -> Dict[Any, Any]:
        """–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        return await self._request("POST", "/auto-update/enable")
    
    async def disable_auto_update(self) -> Dict[Any, Any]:
        """–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        return await self._request("POST", "/auto-update/disable")
    
    async def run_update_now(self) -> Dict[Any, Any]:
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é"""
        return await self._request("POST", "/auto-update/run")
    
    async def get_update_logs(self, limit: int = 50) -> Dict[Any, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        return await self._request("GET", f"/auto-update/logs?limit={limit}")

def print_json(data: Dict[Any, Any], title: str = ""):
    """–ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–µ—Å—Ç–∏ JSON"""
    if title:
        print(f"\nüìã {title}")
        print("=" * (len(title) + 4))
    print(json.dumps(data, indent=2, ensure_ascii=False))

async def example_basic_usage():
    """–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Minecraft Mod Manager")
    
    client = ModManagerClient()
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞...")
        health = await client.health_check()
        print(f"   –°—Ç–∞—Ç—É—Å: {health['status']}")
        print(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {health['uptime']:.1f}s")
        print(f"   Modrinth API: {'‚úÖ' if health['modrinth_api_accessible'] else '‚ùå'}")
        
        # 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        print("\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ...")
        server_info = await client.get_server_info()
        print(f"   Minecraft: {server_info['minecraft_version']}")
        print(f"   –ó–∞–≥—Ä—É–∑—á–∏–∫: {server_info['mod_loader']}")
        print(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–æ–¥–æ–≤: {server_info['mods_count']}")
        
        # 3. –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–æ–≤
        print("\n3Ô∏è‚É£ –°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–æ–≤...")
        mods = await client.get_mods()
        print(f"   –í—Å–µ–≥–æ –º–æ–¥–æ–≤: {mods['total']}")
        
        if mods['mods']:
            print("   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–æ–¥—ã:")
            for mod in mods['mods'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {mod['name']} v{mod['version']}")
        
        # 4. –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        print("\n4Ô∏è‚É£ –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        auto_status = await client.get_auto_update_status()
        print(f"   –í–∫–ª—é—á–µ–Ω–æ: {'‚úÖ' if auto_status['enabled'] else '‚ùå'}")
        print(f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {auto_status['interval_hours']} —á.")
        if auto_status.get('last_check'):
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {auto_status['last_check']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def example_install_popular_mods():
    """–ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–æ–≤"""
    print("\nüîß –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–æ–≤")
    
    client = ModManagerClient()
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–æ–≤ –¥–ª—è Fabric
    popular_mods = [
        "sodium",           # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        "lithium",          # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
        "phosphor",         # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è
        "iris",             # –®–µ–π–¥–µ—Ä—ã
        "modmenu",          # –ú–µ–Ω—é –º–æ–¥–æ–≤
    ]
    
    for i, mod in enumerate(popular_mods, 1):
        try:
            print(f"\n{i}Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–∞: {mod}")
            result = await client.install_mod(mod)
            
            if result['status'] == 'success':
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:")
                for installed in result['installed']:
                    print(f"      + {installed}")
                for updated in result['updated']:
                    print(f"      ‚ÜóÔ∏è {updated} (–æ–±–Ω–æ–≤–ª–µ–Ω)")
                for skipped in result['skipped']:
                    print(f"      ‚è≠Ô∏è {skipped} (–ø—Ä–æ–ø—É—â–µ–Ω)")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {mod}: {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏
        await asyncio.sleep(1)

async def example_mod_management():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–º–∏"""
    print("\nüîÑ –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–º–∏")
    
    client = ModManagerClient()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–æ–≤
        mods = await client.get_mods()
        
        if not mods['mods']:
            print("   –ù–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–¥–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –º–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        example_mod = mods['mods'][0]
        mod_slug = example_mod['slug']
        
        print(f"   –†–∞–±–æ—Ç–∞–µ–º —Å –º–æ–¥–æ–º: {example_mod['name']} ({mod_slug})")
        
        # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞
        print(f"\n1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥–∞ {mod_slug}...")
        update_result = await client.update_mod(mod_slug)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {update_result['status']} - {update_result['message']}")
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        print(f"\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        updated_mods = await client.get_mods()
        updated_mod = next((m for m in updated_mods['mods'] if m['slug'] == mod_slug), None)
        
        if updated_mod:
            print(f"   –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {updated_mod['version']}")
            print(f"   –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {'‚úÖ' if updated_mod['auto_update'] else '‚ùå'}")
        
        # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
        print(f"\n3Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–∞ (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è - –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)")
        print(f"   # await client.remove_mod('{mod_slug}')")
        print(f"   # print('–ú–æ–¥ {mod_slug} —É–¥–∞–ª–µ–Ω')")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–º–∏: {e}")

async def example_auto_update_management():
    """–ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
    print("\n‚öôÔ∏è –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏")
    
    client = ModManagerClient()
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        print("\n1Ô∏è‚É£ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        status = await client.get_auto_update_status()
        print_json(status, "–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        print("\n2Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
        logs = await client.get_update_logs(limit=10)
        
        if logs['logs']:
            print(f"   –ù–∞–π–¥–µ–Ω–æ {logs['total']} –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–∞—Ö:")
            for log in logs['logs'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {log['timestamp']}: {log['mod_slug']} "
                      f"{log['old_version']} -> {log['new_version']} ({log['status']})")
        else:
            print("   –õ–æ–≥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—É—Å—Ç—ã")
        
        # 3. –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
        print("\n3Ô∏è‚É£ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤—Ä—É—á–Ω—É—é...")
        run_result = await client.run_update_now()
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {run_result['status']} - {run_result['message']}")
        
        # 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ)
        print("\n4Ô∏è‚É£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º (–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è)")
        
        if status['enabled']:
            print("   –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
            print("   # await client.disable_auto_update()  # –û—Ç–∫–ª—é—á–∏—Ç—å")
            print("   # await client.enable_auto_update()   # –í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ")
        else:
            print("   –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            print("   # await client.enable_auto_update()   # –í–∫–ª—é—á–∏—Ç—å")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: {e}")

async def example_error_handling():
    """–ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüö® –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    
    client = ModManagerClient()
    
    # 1. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥
    print("\n1Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥...")
    try:
        result = await client.install_mod("nonexistent-mod-12345")
        print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö: {result}")
    except httpx.HTTPStatusError as e:
        print(f"   ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ HTTP {e.response.status_code}")
        try:
            error_data = e.response.json()
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {error_data.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
        except:
            print(f"   –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {e.response.text}")
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # 2. –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥
    print("\n2Ô∏è‚É£ –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥...")
    try:
        result = await client.remove_mod("nonexistent-mod-12345")
        print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö: {result}")
    except httpx.HTTPStatusError as e:
        print(f"   ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ HTTP {e.response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...")
    offline_client = ModManagerClient("http://localhost:9999")  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç
    
    try:
        result = await offline_client.health_check()
        print(f"   –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—Ö: {result}")
    except httpx.ConnectError:
        print("   ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    except Exception as e:
        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Minecraft Mod Manager API")
    print("=" * 50)
    
    print("\n‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python run.py")
    print("   –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...")
    
    try:
        input()
    except KeyboardInterrupt:
        print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    await example_basic_usage()
    await asyncio.sleep(2)
    
    await example_auto_update_management()
    await asyncio.sleep(2)
    
    await example_error_handling()
    await asyncio.sleep(2)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ —É—Å—Ç–∞–Ω–æ–≤–∫—É –º–æ–¥–æ–≤
    print("\n" + "=" * 50)
    print("ü§î –•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –º–æ–¥–æ–≤?")
    print("   –≠—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–æ–≤ –≤ –≤–∞—à Minecraft —Å–µ—Ä–≤–µ—Ä.")
    print("   –í–≤–µ–¥–∏—Ç–µ 'yes' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:")
    
    try:
        response = input().strip().lower()
        if response == 'yes':
            await example_install_popular_mods()
            await asyncio.sleep(2)
            await example_mod_management()
        else:
            print("   ‚è≠Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
    except KeyboardInterrupt:
        print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    print("\n" + "=" * 50)
    print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("üìñ –ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ README.md")

if __name__ == "__main__":
    asyncio.run(main())